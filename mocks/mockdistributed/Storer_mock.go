// Code generated by mockery v2.42.0. DO NOT EDIT.

package mockdistributed

import mock "github.com/stretchr/testify/mock"

// Storer is an autogenerated mock type for the Storer type
type Storer struct {
	mock.Mock
}

type Storer_Expecter struct {
	mock *mock.Mock
}

func (_m *Storer) EXPECT() *Storer_Expecter {
	return &Storer_Expecter{mock: &_m.Mock}
}

// Clear provides a mock function with given fields:
func (_m *Storer) Clear() {
	_m.Called()
}

// Storer_Clear_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clear'
type Storer_Clear_Call struct {
	*mock.Call
}

// Clear is a helper method to define mock.On call
func (_e *Storer_Expecter) Clear() *Storer_Clear_Call {
	return &Storer_Clear_Call{Call: _e.mock.On("Clear")}
}

func (_c *Storer_Clear_Call) Run(run func()) *Storer_Clear_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Storer_Clear_Call) Return() *Storer_Clear_Call {
	_c.Call.Return()
	return _c
}

func (_c *Storer_Clear_Call) RunAndReturn(run func()) *Storer_Clear_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: key
func (_m *Storer) Delete(key string) error {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storer_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Storer_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - key string
func (_e *Storer_Expecter) Delete(key interface{}) *Storer_Delete_Call {
	return &Storer_Delete_Call{Call: _e.mock.On("Delete", key)}
}

func (_c *Storer_Delete_Call) Run(run func(key string)) *Storer_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Storer_Delete_Call) Return(_a0 error) *Storer_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storer_Delete_Call) RunAndReturn(run func(string) error) *Storer_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Dump provides a mock function with given fields:
func (_m *Storer) Dump() map[string]string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Dump")
	}

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// Storer_Dump_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dump'
type Storer_Dump_Call struct {
	*mock.Call
}

// Dump is a helper method to define mock.On call
func (_e *Storer_Expecter) Dump() *Storer_Dump_Call {
	return &Storer_Dump_Call{Call: _e.mock.On("Dump")}
}

func (_c *Storer_Dump_Call) Run(run func()) *Storer_Dump_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Storer_Dump_Call) Return(_a0 map[string]string) *Storer_Dump_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storer_Dump_Call) RunAndReturn(run func() map[string]string) *Storer_Dump_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: key, value
func (_m *Storer) Set(key string, value string) error {
	ret := _m.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storer_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type Storer_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - key string
//   - value string
func (_e *Storer_Expecter) Set(key interface{}, value interface{}) *Storer_Set_Call {
	return &Storer_Set_Call{Call: _e.mock.On("Set", key, value)}
}

func (_c *Storer_Set_Call) Run(run func(key string, value string)) *Storer_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Storer_Set_Call) Return(_a0 error) *Storer_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storer_Set_Call) RunAndReturn(run func(string, string) error) *Storer_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewStorer creates a new instance of Storer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storer {
	mock := &Storer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
