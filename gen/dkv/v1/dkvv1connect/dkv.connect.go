// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: dkv/v1/dkv.proto

package dkvv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	v1 "distributed-kv/gen/dkv/v1"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DkvAPIName is the fully-qualified name of the DkvAPI service.
	DkvAPIName = "dkv.v1.DkvAPI"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DkvAPIGetProcedure is the fully-qualified name of the DkvAPI's Get RPC.
	DkvAPIGetProcedure = "/dkv.v1.DkvAPI/Get"
	// DkvAPISetProcedure is the fully-qualified name of the DkvAPI's Set RPC.
	DkvAPISetProcedure = "/dkv.v1.DkvAPI/Set"
	// DkvAPIDeleteProcedure is the fully-qualified name of the DkvAPI's Delete RPC.
	DkvAPIDeleteProcedure = "/dkv.v1.DkvAPI/Delete"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	dkvAPIServiceDescriptor      = v1.File_dkv_v1_dkv_proto.Services().ByName("DkvAPI")
	dkvAPIGetMethodDescriptor    = dkvAPIServiceDescriptor.Methods().ByName("Get")
	dkvAPISetMethodDescriptor    = dkvAPIServiceDescriptor.Methods().ByName("Set")
	dkvAPIDeleteMethodDescriptor = dkvAPIServiceDescriptor.Methods().ByName("Delete")
)

// DkvAPIClient is a client for the dkv.v1.DkvAPI service.
type DkvAPIClient interface {
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	Set(context.Context, *connect.Request[v1.SetRequest]) (*connect.Response[v1.SetResponse], error)
	Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error)
}

// NewDkvAPIClient constructs a client for the dkv.v1.DkvAPI service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDkvAPIClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DkvAPIClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &dkvAPIClient{
		get: connect.NewClient[v1.GetRequest, v1.GetResponse](
			httpClient,
			baseURL+DkvAPIGetProcedure,
			connect.WithSchema(dkvAPIGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		set: connect.NewClient[v1.SetRequest, v1.SetResponse](
			httpClient,
			baseURL+DkvAPISetProcedure,
			connect.WithSchema(dkvAPISetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[v1.DeleteRequest, v1.DeleteResponse](
			httpClient,
			baseURL+DkvAPIDeleteProcedure,
			connect.WithSchema(dkvAPIDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// dkvAPIClient implements DkvAPIClient.
type dkvAPIClient struct {
	get    *connect.Client[v1.GetRequest, v1.GetResponse]
	set    *connect.Client[v1.SetRequest, v1.SetResponse]
	delete *connect.Client[v1.DeleteRequest, v1.DeleteResponse]
}

// Get calls dkv.v1.DkvAPI.Get.
func (c *dkvAPIClient) Get(ctx context.Context, req *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// Set calls dkv.v1.DkvAPI.Set.
func (c *dkvAPIClient) Set(ctx context.Context, req *connect.Request[v1.SetRequest]) (*connect.Response[v1.SetResponse], error) {
	return c.set.CallUnary(ctx, req)
}

// Delete calls dkv.v1.DkvAPI.Delete.
func (c *dkvAPIClient) Delete(ctx context.Context, req *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// DkvAPIHandler is an implementation of the dkv.v1.DkvAPI service.
type DkvAPIHandler interface {
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	Set(context.Context, *connect.Request[v1.SetRequest]) (*connect.Response[v1.SetResponse], error)
	Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error)
}

// NewDkvAPIHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDkvAPIHandler(svc DkvAPIHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	dkvAPIGetHandler := connect.NewUnaryHandler(
		DkvAPIGetProcedure,
		svc.Get,
		connect.WithSchema(dkvAPIGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	dkvAPISetHandler := connect.NewUnaryHandler(
		DkvAPISetProcedure,
		svc.Set,
		connect.WithSchema(dkvAPISetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	dkvAPIDeleteHandler := connect.NewUnaryHandler(
		DkvAPIDeleteProcedure,
		svc.Delete,
		connect.WithSchema(dkvAPIDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/dkv.v1.DkvAPI/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DkvAPIGetProcedure:
			dkvAPIGetHandler.ServeHTTP(w, r)
		case DkvAPISetProcedure:
			dkvAPISetHandler.ServeHTTP(w, r)
		case DkvAPIDeleteProcedure:
			dkvAPIDeleteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDkvAPIHandler returns CodeUnimplemented from all methods.
type UnimplementedDkvAPIHandler struct{}

func (UnimplementedDkvAPIHandler) Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dkv.v1.DkvAPI.Get is not implemented"))
}

func (UnimplementedDkvAPIHandler) Set(context.Context, *connect.Request[v1.SetRequest]) (*connect.Response[v1.SetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dkv.v1.DkvAPI.Set is not implemented"))
}

func (UnimplementedDkvAPIHandler) Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dkv.v1.DkvAPI.Delete is not implemented"))
}
